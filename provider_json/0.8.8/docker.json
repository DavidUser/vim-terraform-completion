{"provider_arguments":[{"word":"host","info":"host - (Required) This is the address to the Docker host. If this is\nblank, the DOCKER_HOST environment variable will also be read.\n"},{"word":"cert_path","info":"cert_path - (Optional) Path to a directory with certificate information\nfor connecting to the Docker host via TLS. If this is blank, the\nDOCKER_CERT_PATH will also be checked.\n"},{"word":"ca_material","info":"ca_material, cert_material, key_material, - (Optional) Content of ca.pem, cert.pem, and key.pem files\nfor TLS authentication. Cannot be used together with cert_path.\n"}],"resources":{"container":{"provider":"docker","arguments":[{"word":"name","info":"name - (Required, string) The name of the Docker container.\n"},{"word":"image","info":"image - (Required, string) The ID of the image to back this container.\nThe easiest way to get this value is to use the docker_image resource\nas is shown in the example above.\n"},{"word":"command","info":"command - (Optional, list of strings) The command to use to start the\ncontainer. For example, to run /usr/bin/myprogram -f baz.conf set the\ncommand to be [\"/usr/bin/myprogram\", \"-f\", \"baz.conf\"].\n"},{"word":"entrypoint","info":"entrypoint - (Optional, list of strings) The command to use as the\nEntrypoint for the container. The Entrypoint allows you to configure a\ncontainer to run as an executable. For example, to run /usr/bin/myprogram\nwhen starting a container, set the entrypoint to be\n[\"/usr/bin/myprogram\"].\n"},{"word":"user","info":"user - (Optional, string) User used for run the first process. Format is\nuser or user:group which user and group can be passed literraly or\nby name.\n"},{"word":"dns","info":"dns - (Optional, set of strings) Set of DNS servers.\n"},{"word":"dns_opts","info":"dns_opts - (Optional, set of strings) Set of DNS options used by the DNS provider(s), see resolv.conf documentation for valid list of options.\n"},{"word":"dns_search","info":"dns_search - (Optional, set of strings) Set of DNS search domains that are used when bare unqualified hostnames are used inside of the container.\n"},{"word":"env","info":"env - (Optional, set of strings) Environment variables to set.\n"},{"word":"labels","info":"labels - (Optional, map of strings) Key/value pairs to set as labels on the\ncontainer.\n"},{"word":"links","info":"links - (Optional, set of strings) Set of links for link based\nconnectivity between containers that are running on the same host.\n"},{"word":"hostname","info":"hostname - (Optional, string) Hostname of the container.\n"},{"word":"domainname","info":"domainname - (Optional, string) Domain name of the container.\n"},{"word":"restart","info":"restart - (Optional, string) The restart policy for the container. Must be\none of \"no\", \"on-failure\", \"always\", \"unless-stopped\".\n"},{"word":"max_retry_count","info":"max_retry_count - (Optional, int) The maximum amount of times to an attempt\na restart when restart is set to \"on-failure\"\n"},{"word":"must_run","info":"must_run - (Optional, bool) If true, then the Docker container will be\nkept running. If false, then as long as the container exists, Terraform\nassumes it is successful.\n"},{"word":"ports","info":"ports - (Optional, block) See Ports below for details.\n"},{"word":"host","info":"host - (Optional, block) See Extra Hosts below for\ndetails.\n"},{"word":"privileged","info":"privileged - (Optional, bool) Run container in privileged mode.\n"},{"word":"publish_all_ports","info":"publish_all_ports - (Optional, bool) Publish all ports of the container.\n"},{"word":"volumes","info":"volumes - (Optional, block) See Volumes below for details.\n"},{"word":"memory","info":"memory - (Optional, int) The memory limit for the container in MBs.\n"},{"word":"memory_swap","info":"memory_swap - (Optional, int) The total memory limit (memory + swap) for the\ncontainer in MBs. This setting may compute to -1 after terraform apply if the target host doesn't support memory swap, when that is the case docker will use a soft limitation.\n"},{"word":"cpu_shares","info":"cpu_shares - (Optional, int) CPU shares (relative weight) for the container.\n"},{"word":"log_driver","info":"log_driver - (Optional, string) The logging driver to use for the container.\nDefaults to \"json-file\".\n"},{"word":"log_opts","info":"log_opts - (Optional, map of strings) Key/value pairs to use as options for\nthe logging driver.\n"},{"word":"network_mode","info":"network_mode - (Optional, string) Network mode of the container.\n"},{"word":"networks","info":"networks - (Optional, set of strings) Id of the networks in which the\ncontainer is.\n"},{"word":"destroy_grace_seconds","info":"destroy_grace_seconds - (Optional, int) If defined will attempt to stop the container before destroying. Container will be destroyed after n seconds or on successful stop.\n"},{"word":"upload","info":"upload - (Optional, block) See File Upload below for details.\n"}],"attributes":[{"word":"ip_address","info":"ip_address - The IP address of the container as read from its\nNetworkSettings.\n"},{"word":"ip_prefix_length","info":"ip_prefix_length - The IP prefix length of the container as read from its\nNetworkSettings.\n"},{"word":"gateway","info":"gateway - The network gateway of the container as read from its\nNetworkSettings.\n"},{"word":"bridge","info":"bridge - The network bridge of the container as read from its\nNetworkSettings.\n"}]},"image":{"provider":"docker","arguments":[{"word":"name","info":"name - (Required, string) The name of the Docker image, including any tags.\n"},{"word":"keep_locally","info":"keep_locally - (Optional, boolean) If true, then the Docker image won't be\ndeleted on destroy operation. If this is false, it will delete the image from\nthe docker local storage on destroy operation.\n"},{"word":"pull_triggers","info":"pull_triggers - (Optional, list of strings) List of values which cause an\nimage pull when changed. This is used to store the image digest from the\nregistry when using the docker_registry_image data source\nto trigger an image update.\n"},{"word":"pull_trigger","info":"pull_trigger - Deprecated, use pull_triggers instead.\n"}],"attributes":[{"word":"latest","info":"latest (string) - The ID of the image.\n"}]},"network":{"provider":"docker","arguments":[{"word":"name","info":"name - (Required, string) The name of the Docker network.\n"},{"word":"check_duplicate","info":"check_duplicate - (Optional, boolean) Requests daemon to check for networks\nwith same name.\n"},{"word":"driver","info":"driver - (Optional, string) Name of the network driver to use. Defaults to\nbridge driver.\n"},{"word":"options","info":"options - (Optional, map of strings) Network specific options to be used by\nthe drivers.\n"},{"word":"internal","info":"internal - (Optional, boolean) Restrict external access to the network.\nDefaults to false.\n"},{"word":"ipam_driver","info":"ipam_driver - (Optional, string) Driver used by the custom IP scheme of the\nnetwork.\n"},{"word":"ipam_config","info":"ipam_config - (Optional, block) See IPAM config below for\ndetails.\n"}],"attributes":[{"word":"id","info":"id (string)\n"},{"word":"scope","info":"scope (string)\n"}]},"volume":{"provider":"docker","arguments":[{"word":"name","info":"name - (Optional, string) The name of the Docker volume (generated if not\nprovided).\n"},{"word":"driver","info":"driver - (Optional, string) Driver type for the volume (defaults to local).\n"},{"word":"driver_opts","info":"driver_opts - (Optional, map of strings) Options specific to the driver.\n"}],"attributes":[{"word":"mountpoint","info":"mountpoint (string) - The mountpoint of the volume.\n"}]}},"datas":{"registry_image":{"provider":"docker","arguments":[{"word":"name","info":"name - (Required, string) The name of the Docker image, including any tags. e.g. alpine:latest\n"}],"attributes":[{"word":"sha256_digest","info":"sha256_digest (string) - The content digest of the image, as stored on the registry.\n"}]}},"unknowns":{}}